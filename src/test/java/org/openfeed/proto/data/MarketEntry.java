// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MarketEntrySpec.proto

package org.openfeed.proto.data;

/**
 * Protobuf type {@code org.openfeed.proto.data.MarketEntry}
 *
 * <pre>
 * Market data entry.
 * </pre>
 */
public  final class MarketEntry extends
    com.google.protobuf.GeneratedMessage
    implements MarketEntryOrBuilder {
  // Use MarketEntry.newBuilder() to construct.
  private MarketEntry(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private MarketEntry(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

  private static final MarketEntry defaultInstance;
  public static MarketEntry getDefaultInstance() {
    return defaultInstance;
  }

  public MarketEntry getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final com.google.protobuf.UnknownFieldSet unknownFields;
  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
    return this.unknownFields;
  }
  private MarketEntry(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            int rawValue = input.readEnum();
            org.openfeed.proto.data.MarketEntry.Action value = org.openfeed.proto.data.MarketEntry.Action.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(1, rawValue);
            } else {
              bitField0_ |= 0x00000001;
              action_ = value;
            }
            break;
          }
          case 16: {
            int rawValue = input.readEnum();
            org.openfeed.proto.data.MarketEntry.Type value = org.openfeed.proto.data.MarketEntry.Type.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(2, rawValue);
            } else {
              bitField0_ |= 0x00000002;
              type_ = value;
            }
            break;
          }
          case 24: {
            int rawValue = input.readEnum();
            org.openfeed.proto.data.MarketEntry.Descriptor value = org.openfeed.proto.data.MarketEntry.Descriptor.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(3, rawValue);
            } else {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                descriptor_ = new java.util.ArrayList<org.openfeed.proto.data.MarketEntry.Descriptor>();
                mutable_bitField0_ |= 0x00000004;
              }
              descriptor_.add(value);
            }
            break;
          }
          case 26: {
            int length = input.readRawVarint32();
            int oldLimit = input.pushLimit(length);
            while(input.getBytesUntilLimit() > 0) {
              int rawValue = input.readEnum();
              org.openfeed.proto.data.MarketEntry.Descriptor value = org.openfeed.proto.data.MarketEntry.Descriptor.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  descriptor_ = new java.util.ArrayList<org.openfeed.proto.data.MarketEntry.Descriptor>();
                  mutable_bitField0_ |= 0x00000004;
                }
                descriptor_.add(value);
              }
            }
            input.popLimit(oldLimit);
            break;
          }
          case 32: {
            bitField0_ |= 0x00000004;
            marketId_ = input.readSInt64();
            break;
          }
          case 40: {
            bitField0_ |= 0x00000008;
            sequence_ = input.readSInt64();
            break;
          }
          case 48: {
            bitField0_ |= 0x00000010;
            timeStamp_ = input.readSInt64();
            break;
          }
          case 56: {
            bitField0_ |= 0x00000020;
            tradeDate_ = input.readSInt32();
            break;
          }
          case 64: {
            bitField0_ |= 0x00000040;
            priceMantissa_ = input.readSInt64();
            break;
          }
          case 72: {
            bitField0_ |= 0x00000080;
            priceExponent_ = input.readSInt32();
            break;
          }
          case 80: {
            bitField0_ |= 0x00000100;
            sizeMantissa_ = input.readSInt64();
            break;
          }
          case 88: {
            bitField0_ |= 0x00000200;
            sizeExponent_ = input.readSInt32();
            break;
          }
          case 96: {
            bitField0_ |= 0x00000400;
            index_ = input.readSInt64();
            break;
          }
          case 104: {
            bitField0_ |= 0x00000800;
            orderId_ = input.readSInt64();
            break;
          }
          case 112: {
            bitField0_ |= 0x00001000;
            orderCount_ = input.readSInt32();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        descriptor_ = java.util.Collections.unmodifiableList(descriptor_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.openfeed.proto.data.MarketEntrySpec.internal_static_org_openfeed_proto_data_MarketEntry_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.openfeed.proto.data.MarketEntrySpec.internal_static_org_openfeed_proto_data_MarketEntry_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.openfeed.proto.data.MarketEntry.class, org.openfeed.proto.data.MarketEntry.Builder.class);
  }

  public static com.google.protobuf.Parser<MarketEntry> PARSER =
      new com.google.protobuf.AbstractParser<MarketEntry>() {
    public MarketEntry parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new MarketEntry(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public com.google.protobuf.Parser<MarketEntry> getParserForType() {
    return PARSER;
  }

  /**
   * Protobuf enum {@code org.openfeed.proto.data.MarketEntry.Action}
   *
   * <pre>
   * Entry action.
   * </pre>
   */
  public enum Action
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ADD = 0;</code>
     *
     * <pre>
     * new, create, insert
     * </pre>
     */
    ADD(0, 0),
    /**
     * <code>EDIT = 1;</code>
     *
     * <pre>
     * merge, modify, replace, override, overlay
     * </pre>
     */
    EDIT(1, 1),
    /**
     * <code>REMOVE = 2;</code>
     *
     * <pre>
     * delete, erase, clear, reset
     * </pre>
     */
    REMOVE(2, 2),
    ;

    /**
     * <code>ADD = 0;</code>
     *
     * <pre>
     * new, create, insert
     * </pre>
     */
    public static final int ADD_VALUE = 0;
    /**
     * <code>EDIT = 1;</code>
     *
     * <pre>
     * merge, modify, replace, override, overlay
     * </pre>
     */
    public static final int EDIT_VALUE = 1;
    /**
     * <code>REMOVE = 2;</code>
     *
     * <pre>
     * delete, erase, clear, reset
     * </pre>
     */
    public static final int REMOVE_VALUE = 2;


    public final int getNumber() { return value; }

    public static Action valueOf(int value) {
      switch (value) {
        case 0: return ADD;
        case 1: return EDIT;
        case 2: return REMOVE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Action>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Action>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Action>() {
            public Action findValueByNumber(int number) {
              return Action.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.openfeed.proto.data.MarketEntry.getDescriptor().getEnumTypes().get(0);
    }

    private static final Action[] VALUES = values();

    public static Action valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Action(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.openfeed.proto.data.MarketEntry.Action)
  }

  /**
   * Protobuf enum {@code org.openfeed.proto.data.MarketEntry.Type}
   *
   * <pre>
   * Primary entry category.
   * Keep most frequent first.
   * </pre>
   */
  public enum Type
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TRADE = 0;</code>
     *
     * <pre>
     * a.k.a last sale; price &amp; size (size mostly present)
     * </pre>
     */
    TRADE(0, 0),
    /**
     * <code>BID = 1;</code>
     *
     * <pre>
     * book side
     * </pre>
     */
    BID(1, 1),
    /**
     * <code>ASK = 2;</code>
     *
     * <pre>
     * book side
     * </pre>
     */
    ASK(2, 2),
    /**
     * <code>CHANGE = 3;</code>
     *
     * <pre>
     * such as price change from previous day
     * </pre>
     */
    CHANGE(3, 3),
    /**
     * <code>UNDERLYING = 4;</code>
     *
     * <pre>
     * such as option/spread underlying price
     * </pre>
     */
    UNDERLYING(4, 4),
    /**
     * <code>VOLUME = 5;</code>
     */
    VOLUME(5, 5),
    /**
     * <code>OPEN = 6;</code>
     */
    OPEN(6, 6),
    /**
     * <code>HIGH = 7;</code>
     */
    HIGH(7, 7),
    /**
     * <code>LOW = 8;</code>
     */
    LOW(8, 8),
    /**
     * <code>CLOSE = 9;</code>
     *
     * <pre>
     * a.k.a last sale, before close; price; (size mostly absent)
     * </pre>
     */
    CLOSE(9, 9),
    /**
     * <code>SETTLE = 10;</code>
     */
    SETTLE(10, 10),
    /**
     * <code>INTEREST = 11;</code>
     */
    INTEREST(11, 11),
    /**
     * <code>CUVOL = 12;</code>
     *
     * <pre>
     * cumulative volume
     * </pre>
     */
    CUVOL(12, 12),
    /**
     * <code>STATUS = 13;</code>
     *
     * <pre>
     * non price/size change; such as OPEN/CLOSE event
     * </pre>
     */
    STATUS(13, 13),
    /**
     * <code>SEQUENCE = 14;</code>
     *
     * <pre>
     *such as snapshot &amp; update sequence synchronization index
     * </pre>
     */
    SEQUENCE(14, 14),
    /**
     * <code>TIME = 126;</code>
     *
     * <pre>
     ** Time value stored as entry size. 
     * </pre>
     */
    TIME(15, 126),
    /**
     * <code>UNKNOWN = 127;</code>
     *
     * <pre>
     * keep under 128
     * </pre>
     */
    UNKNOWN(16, 127),
    ;

    /**
     * <code>TRADE = 0;</code>
     *
     * <pre>
     * a.k.a last sale; price &amp; size (size mostly present)
     * </pre>
     */
    public static final int TRADE_VALUE = 0;
    /**
     * <code>BID = 1;</code>
     *
     * <pre>
     * book side
     * </pre>
     */
    public static final int BID_VALUE = 1;
    /**
     * <code>ASK = 2;</code>
     *
     * <pre>
     * book side
     * </pre>
     */
    public static final int ASK_VALUE = 2;
    /**
     * <code>CHANGE = 3;</code>
     *
     * <pre>
     * such as price change from previous day
     * </pre>
     */
    public static final int CHANGE_VALUE = 3;
    /**
     * <code>UNDERLYING = 4;</code>
     *
     * <pre>
     * such as option/spread underlying price
     * </pre>
     */
    public static final int UNDERLYING_VALUE = 4;
    /**
     * <code>VOLUME = 5;</code>
     */
    public static final int VOLUME_VALUE = 5;
    /**
     * <code>OPEN = 6;</code>
     */
    public static final int OPEN_VALUE = 6;
    /**
     * <code>HIGH = 7;</code>
     */
    public static final int HIGH_VALUE = 7;
    /**
     * <code>LOW = 8;</code>
     */
    public static final int LOW_VALUE = 8;
    /**
     * <code>CLOSE = 9;</code>
     *
     * <pre>
     * a.k.a last sale, before close; price; (size mostly absent)
     * </pre>
     */
    public static final int CLOSE_VALUE = 9;
    /**
     * <code>SETTLE = 10;</code>
     */
    public static final int SETTLE_VALUE = 10;
    /**
     * <code>INTEREST = 11;</code>
     */
    public static final int INTEREST_VALUE = 11;
    /**
     * <code>CUVOL = 12;</code>
     *
     * <pre>
     * cumulative volume
     * </pre>
     */
    public static final int CUVOL_VALUE = 12;
    /**
     * <code>STATUS = 13;</code>
     *
     * <pre>
     * non price/size change; such as OPEN/CLOSE event
     * </pre>
     */
    public static final int STATUS_VALUE = 13;
    /**
     * <code>SEQUENCE = 14;</code>
     *
     * <pre>
     *such as snapshot &amp; update sequence synchronization index
     * </pre>
     */
    public static final int SEQUENCE_VALUE = 14;
    /**
     * <code>TIME = 126;</code>
     *
     * <pre>
     ** Time value stored as entry size. 
     * </pre>
     */
    public static final int TIME_VALUE = 126;
    /**
     * <code>UNKNOWN = 127;</code>
     *
     * <pre>
     * keep under 128
     * </pre>
     */
    public static final int UNKNOWN_VALUE = 127;


    public final int getNumber() { return value; }

    public static Type valueOf(int value) {
      switch (value) {
        case 0: return TRADE;
        case 1: return BID;
        case 2: return ASK;
        case 3: return CHANGE;
        case 4: return UNDERLYING;
        case 5: return VOLUME;
        case 6: return OPEN;
        case 7: return HIGH;
        case 8: return LOW;
        case 9: return CLOSE;
        case 10: return SETTLE;
        case 11: return INTEREST;
        case 12: return CUVOL;
        case 13: return STATUS;
        case 14: return SEQUENCE;
        case 126: return TIME;
        case 127: return UNKNOWN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Type>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Type>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Type>() {
            public Type findValueByNumber(int number) {
              return Type.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.openfeed.proto.data.MarketEntry.getDescriptor().getEnumTypes().get(1);
    }

    private static final Type[] VALUES = values();

    public static Type valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Type(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.openfeed.proto.data.MarketEntry.Type)
  }

  /**
   * Protobuf enum {@code org.openfeed.proto.data.MarketEntry.Descriptor}
   *
   * <pre>
   * Secondary entry category a.k.a entry annotation.
   * Keep in "name-space-like" format.
   * </pre>
   */
  public enum Descriptor
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>BOOK_IMPLIED = 0;</code>
     *
     * <pre>
     * ICE, CME
     * </pre>
     */
    BOOK_IMPLIED(0, 0),
    /**
     * <code>BOOK_RFQ = 1;</code>
     *
     * <pre>
     * ICE
     * </pre>
     */
    BOOK_RFQ(1, 1),
    /**
     * <code>SETTLE_UNOFFICIAL = 2;</code>
     *
     * <pre>
     * ICE
     * </pre>
     */
    SETTLE_UNOFFICIAL(2, 2),
    /**
     * <code>SETTLE_PRELIMINARY = 3;</code>
     *
     * <pre>
     * CME
     * </pre>
     */
    SETTLE_PRELIMINARY(3, 3),
    /**
     * <code>SETTLE_THEORETICAL = 4;</code>
     *
     * <pre>
     * CME
     * </pre>
     */
    SETTLE_THEORETICAL(4, 4),
    /**
     * <code>PERIOD_DAY = 10;</code>
     */
    PERIOD_DAY(5, 10),
    /**
     * <code>PERIOD_WEEK = 11;</code>
     */
    PERIOD_WEEK(6, 11),
    /**
     * <code>PERIOD_MONTH = 12;</code>
     */
    PERIOD_MONTH(7, 12),
    /**
     * <code>PERIOD_YEAR = 13;</code>
     */
    PERIOD_YEAR(8, 13),
    /**
     * <code>LAST_BEST = 14;</code>
     */
    LAST_BEST(9, 14),
    /**
     * <code>SESSION_HIGH = 20;</code>
     */
    SESSION_HIGH(10, 20),
    /**
     * <code>SESSION_LOW = 21;</code>
     */
    SESSION_LOW(11, 21),
    /**
     * <code>ADJUSTED_TRADE = 30;</code>
     */
    ADJUSTED_TRADE(12, 30),
    /**
     * <code>SESSION_OVERNIGHT = 50;</code>
     *
     * <pre>
     * such as FORM-T
     * </pre>
     */
    SESSION_OVERNIGHT(13, 50),
    /**
     * <code>ORDER_COUNT = 60;</code>
     *
     * <pre>
     * </pre>
     */
    ORDER_COUNT(14, 60),
    /**
     * <code>IMPLIED_QUANTITY = 61;</code>
     */
    IMPLIED_QUANTITY(15, 61),
    /**
     * <code>IMPLIED_ORDER_COUNT = 62;</code>
     */
    IMPLIED_ORDER_COUNT(16, 62),
    /**
     * <code>NUMBER_OF_BOOK_ENTRIES = 70;</code>
     */
    NUMBER_OF_BOOK_ENTRIES(17, 70),
    /**
     * <code>LAST_MESSAGE_SEQUENCE = 71;</code>
     */
    LAST_MESSAGE_SEQUENCE(18, 71),
    /**
     * <code>PERCENTAGE = 72;</code>
     */
    PERCENTAGE(19, 72),
    /**
     * <code>OVER_THE_COUNTER = 73;</code>
     */
    OVER_THE_COUNTER(20, 73),
    /**
     * <code>EXCHANGE_TRADED = 74;</code>
     */
    EXCHANGE_TRADED(21, 74),
    /**
     * <code>OPTION_THEORETICAL_BID = 80;</code>
     */
    OPTION_THEORETICAL_BID(22, 80),
    /**
     * <code>OPTION_THEORETICAL_ASK = 81;</code>
     */
    OPTION_THEORETICAL_ASK(23, 81),
    /**
     * <code>OPTION_DELTA = 82;</code>
     */
    OPTION_DELTA(24, 82),
    /**
     * <code>OPTION_VEGA = 83;</code>
     */
    OPTION_VEGA(25, 83),
    /**
     * <code>STATUS_MARKET_OPEN = 100;</code>
     *
     * <pre>
     * OPRA, ICE
     * </pre>
     */
    STATUS_MARKET_OPEN(26, 100),
    /**
     * <code>STATUS_MARKET_CLOSE = 101;</code>
     *
     * <pre>
     * OPRA, ICE
     * </pre>
     */
    STATUS_MARKET_CLOSE(27, 101),
    /**
     * <code>STATUS_MARKET_PRE_OPEN = 102;</code>
     *
     * <pre>
     * OPRA, ICE
     * </pre>
     */
    STATUS_MARKET_PRE_OPEN(28, 102),
    /**
     * <code>STATUS_MARKET_PRE_CLOSE = 103;</code>
     *
     * <pre>
     * OPRA, ICE
     * </pre>
     */
    STATUS_MARKET_PRE_CLOSE(29, 103),
    /**
     * <code>STATUS_TRADING_PAUSE = 104;</code>
     */
    STATUS_TRADING_PAUSE(30, 104),
    /**
     * <code>STATUS_TRADING_RESUME = 105;</code>
     */
    STATUS_TRADING_RESUME(31, 105),
    /**
     * <code>STATUS_MARKET_EXPIRED = 106;</code>
     */
    STATUS_MARKET_EXPIRED(32, 106),
    /**
     * <code>SIDE_FIRM = 110;</code>
     *
     * <pre>
     * keep under 128
     * </pre>
     */
    SIDE_FIRM(33, 110),
    /**
     * <code>SIDE_CUSTOMER = 111;</code>
     *
     * <pre>
     * OPRA
     * </pre>
     */
    SIDE_CUSTOMER(34, 111),
    /**
     * <code>INDEX_ON_TRADE = 112;</code>
     *
     * <pre>
     * OPRA
     * </pre>
     */
    INDEX_ON_TRADE(35, 112),
    /**
     * <code>INDEX_ON_BOOK = 113;</code>
     *
     * <pre>
     * OPRA
     * </pre>
     */
    INDEX_ON_BOOK(36, 113),
    /**
     * <code>VOLUME_BLOCK = 120;</code>
     *
     * <pre>
     * ICE
     * </pre>
     */
    VOLUME_BLOCK(37, 120),
    /**
     * <code>VOLUME_EFS = 121;</code>
     *
     * <pre>
     * ICE
     * </pre>
     */
    VOLUME_EFS(38, 121),
    /**
     * <code>VOLUME_EFP = 122;</code>
     *
     * <pre>
     * ICE
     * </pre>
     */
    VOLUME_EFP(39, 122),
    /**
     * <code>PRICE_VWAP = 123;</code>
     *
     * <pre>
     * ICE
     * </pre>
     */
    PRICE_VWAP(40, 123),
    /**
     * <code>PRICE_SYSTEM = 124;</code>
     *
     * <pre>
     * FIXME
     * </pre>
     */
    PRICE_SYSTEM(41, 124),
    /**
     * <code>TRADE_BLOCK = 125;</code>
     *
     * <pre>
     * </pre>
     */
    TRADE_BLOCK(42, 125),
    /**
     * <code>TRADE_CANCELED = 126;</code>
     *
     * <pre>
     * ICE
     * </pre>
     */
    TRADE_CANCELED(43, 126),
    /**
     * <code>TRADE_INVESTIGATED = 127;</code>
     *
     * <pre>
     * ICE
     * </pre>
     */
    TRADE_INVESTIGATED(44, 127),
    /**
     * <code>PRE_OPEN = 180;</code>
     */
    PRE_OPEN(45, 180),
    /**
     * <code>OPEN_INTEREST = 181;</code>
     */
    OPEN_INTEREST(46, 181),
    /**
     * <code>BLOCK_TRADE = 200;</code>
     *
     * <pre>
     * TODO: Optimize the codes
     * </pre>
     */
    BLOCK_TRADE(47, 200),
    /**
     * <code>EFP_TRADE = 201;</code>
     */
    EFP_TRADE(48, 201),
    /**
     * <code>EFS_TRADE = 202;</code>
     */
    EFS_TRADE(49, 202),
    /**
     * <code>BILATERAL_OFF_EXCHANGE_TRADE = 203;</code>
     */
    BILATERAL_OFF_EXCHANGE_TRADE(50, 203),
    /**
     * <code>NG_EFP_EFS_TRADE = 204;</code>
     */
    NG_EFP_EFS_TRADE(51, 204),
    /**
     * <code>CCX_EFP_TRADE = 205;</code>
     */
    CCX_EFP_TRADE(52, 205),
    /**
     * <code>EFR_TRADE = 206;</code>
     */
    EFR_TRADE(53, 206),
    /**
     * <code>SYSTEM_PRICED_CRACK_SPREAD_LEG = 207;</code>
     */
    SYSTEM_PRICED_CRACK_SPREAD_LEG(54, 207),
    /**
     * <code>SYSTEM_PRICED_LEG = 208;</code>
     */
    SYSTEM_PRICED_LEG(55, 208),
    /**
     * <code>IMPLIED_SPREAD_AT_MARKET_OPEN = 209;</code>
     */
    IMPLIED_SPREAD_AT_MARKET_OPEN(56, 209),
    /**
     * <code>TIME_OPENED = 250;</code>
     *
     * <pre>
     ** Time market opened. 
     * </pre>
     */
    TIME_OPENED(57, 250),
    /**
     * <code>TIME_CLOSED = 251;</code>
     *
     * <pre>
     ** Time market closed. 
     * </pre>
     */
    TIME_CLOSED(58, 251),
    /**
     * <code>TIME_UPDATED = 252;</code>
     *
     * <pre>
     ** Time market updated. 
     * </pre>
     */
    TIME_UPDATED(59, 252),
    ;

    /**
     * <code>BOOK_IMPLIED = 0;</code>
     *
     * <pre>
     * ICE, CME
     * </pre>
     */
    public static final int BOOK_IMPLIED_VALUE = 0;
    /**
     * <code>BOOK_RFQ = 1;</code>
     *
     * <pre>
     * ICE
     * </pre>
     */
    public static final int BOOK_RFQ_VALUE = 1;
    /**
     * <code>SETTLE_UNOFFICIAL = 2;</code>
     *
     * <pre>
     * ICE
     * </pre>
     */
    public static final int SETTLE_UNOFFICIAL_VALUE = 2;
    /**
     * <code>SETTLE_PRELIMINARY = 3;</code>
     *
     * <pre>
     * CME
     * </pre>
     */
    public static final int SETTLE_PRELIMINARY_VALUE = 3;
    /**
     * <code>SETTLE_THEORETICAL = 4;</code>
     *
     * <pre>
     * CME
     * </pre>
     */
    public static final int SETTLE_THEORETICAL_VALUE = 4;
    /**
     * <code>PERIOD_DAY = 10;</code>
     */
    public static final int PERIOD_DAY_VALUE = 10;
    /**
     * <code>PERIOD_WEEK = 11;</code>
     */
    public static final int PERIOD_WEEK_VALUE = 11;
    /**
     * <code>PERIOD_MONTH = 12;</code>
     */
    public static final int PERIOD_MONTH_VALUE = 12;
    /**
     * <code>PERIOD_YEAR = 13;</code>
     */
    public static final int PERIOD_YEAR_VALUE = 13;
    /**
     * <code>LAST_BEST = 14;</code>
     */
    public static final int LAST_BEST_VALUE = 14;
    /**
     * <code>SESSION_HIGH = 20;</code>
     */
    public static final int SESSION_HIGH_VALUE = 20;
    /**
     * <code>SESSION_LOW = 21;</code>
     */
    public static final int SESSION_LOW_VALUE = 21;
    /**
     * <code>ADJUSTED_TRADE = 30;</code>
     */
    public static final int ADJUSTED_TRADE_VALUE = 30;
    /**
     * <code>SESSION_OVERNIGHT = 50;</code>
     *
     * <pre>
     * such as FORM-T
     * </pre>
     */
    public static final int SESSION_OVERNIGHT_VALUE = 50;
    /**
     * <code>ORDER_COUNT = 60;</code>
     *
     * <pre>
     * </pre>
     */
    public static final int ORDER_COUNT_VALUE = 60;
    /**
     * <code>IMPLIED_QUANTITY = 61;</code>
     */
    public static final int IMPLIED_QUANTITY_VALUE = 61;
    /**
     * <code>IMPLIED_ORDER_COUNT = 62;</code>
     */
    public static final int IMPLIED_ORDER_COUNT_VALUE = 62;
    /**
     * <code>NUMBER_OF_BOOK_ENTRIES = 70;</code>
     */
    public static final int NUMBER_OF_BOOK_ENTRIES_VALUE = 70;
    /**
     * <code>LAST_MESSAGE_SEQUENCE = 71;</code>
     */
    public static final int LAST_MESSAGE_SEQUENCE_VALUE = 71;
    /**
     * <code>PERCENTAGE = 72;</code>
     */
    public static final int PERCENTAGE_VALUE = 72;
    /**
     * <code>OVER_THE_COUNTER = 73;</code>
     */
    public static final int OVER_THE_COUNTER_VALUE = 73;
    /**
     * <code>EXCHANGE_TRADED = 74;</code>
     */
    public static final int EXCHANGE_TRADED_VALUE = 74;
    /**
     * <code>OPTION_THEORETICAL_BID = 80;</code>
     */
    public static final int OPTION_THEORETICAL_BID_VALUE = 80;
    /**
     * <code>OPTION_THEORETICAL_ASK = 81;</code>
     */
    public static final int OPTION_THEORETICAL_ASK_VALUE = 81;
    /**
     * <code>OPTION_DELTA = 82;</code>
     */
    public static final int OPTION_DELTA_VALUE = 82;
    /**
     * <code>OPTION_VEGA = 83;</code>
     */
    public static final int OPTION_VEGA_VALUE = 83;
    /**
     * <code>STATUS_MARKET_OPEN = 100;</code>
     *
     * <pre>
     * OPRA, ICE
     * </pre>
     */
    public static final int STATUS_MARKET_OPEN_VALUE = 100;
    /**
     * <code>STATUS_MARKET_CLOSE = 101;</code>
     *
     * <pre>
     * OPRA, ICE
     * </pre>
     */
    public static final int STATUS_MARKET_CLOSE_VALUE = 101;
    /**
     * <code>STATUS_MARKET_PRE_OPEN = 102;</code>
     *
     * <pre>
     * OPRA, ICE
     * </pre>
     */
    public static final int STATUS_MARKET_PRE_OPEN_VALUE = 102;
    /**
     * <code>STATUS_MARKET_PRE_CLOSE = 103;</code>
     *
     * <pre>
     * OPRA, ICE
     * </pre>
     */
    public static final int STATUS_MARKET_PRE_CLOSE_VALUE = 103;
    /**
     * <code>STATUS_TRADING_PAUSE = 104;</code>
     */
    public static final int STATUS_TRADING_PAUSE_VALUE = 104;
    /**
     * <code>STATUS_TRADING_RESUME = 105;</code>
     */
    public static final int STATUS_TRADING_RESUME_VALUE = 105;
    /**
     * <code>STATUS_MARKET_EXPIRED = 106;</code>
     */
    public static final int STATUS_MARKET_EXPIRED_VALUE = 106;
    /**
     * <code>SIDE_FIRM = 110;</code>
     *
     * <pre>
     * keep under 128
     * </pre>
     */
    public static final int SIDE_FIRM_VALUE = 110;
    /**
     * <code>SIDE_CUSTOMER = 111;</code>
     *
     * <pre>
     * OPRA
     * </pre>
     */
    public static final int SIDE_CUSTOMER_VALUE = 111;
    /**
     * <code>INDEX_ON_TRADE = 112;</code>
     *
     * <pre>
     * OPRA
     * </pre>
     */
    public static final int INDEX_ON_TRADE_VALUE = 112;
    /**
     * <code>INDEX_ON_BOOK = 113;</code>
     *
     * <pre>
     * OPRA
     * </pre>
     */
    public static final int INDEX_ON_BOOK_VALUE = 113;
    /**
     * <code>VOLUME_BLOCK = 120;</code>
     *
     * <pre>
     * ICE
     * </pre>
     */
    public static final int VOLUME_BLOCK_VALUE = 120;
    /**
     * <code>VOLUME_EFS = 121;</code>
     *
     * <pre>
     * ICE
     * </pre>
     */
    public static final int VOLUME_EFS_VALUE = 121;
    /**
     * <code>VOLUME_EFP = 122;</code>
     *
     * <pre>
     * ICE
     * </pre>
     */
    public static final int VOLUME_EFP_VALUE = 122;
    /**
     * <code>PRICE_VWAP = 123;</code>
     *
     * <pre>
     * ICE
     * </pre>
     */
    public static final int PRICE_VWAP_VALUE = 123;
    /**
     * <code>PRICE_SYSTEM = 124;</code>
     *
     * <pre>
     * FIXME
     * </pre>
     */
    public static final int PRICE_SYSTEM_VALUE = 124;
    /**
     * <code>TRADE_BLOCK = 125;</code>
     *
     * <pre>
     * </pre>
     */
    public static final int TRADE_BLOCK_VALUE = 125;
    /**
     * <code>TRADE_CANCELED = 126;</code>
     *
     * <pre>
     * ICE
     * </pre>
     */
    public static final int TRADE_CANCELED_VALUE = 126;
    /**
     * <code>TRADE_INVESTIGATED = 127;</code>
     *
     * <pre>
     * ICE
     * </pre>
     */
    public static final int TRADE_INVESTIGATED_VALUE = 127;
    /**
     * <code>PRE_OPEN = 180;</code>
     */
    public static final int PRE_OPEN_VALUE = 180;
    /**
     * <code>OPEN_INTEREST = 181;</code>
     */
    public static final int OPEN_INTEREST_VALUE = 181;
    /**
     * <code>BLOCK_TRADE = 200;</code>
     *
     * <pre>
     * TODO: Optimize the codes
     * </pre>
     */
    public static final int BLOCK_TRADE_VALUE = 200;
    /**
     * <code>EFP_TRADE = 201;</code>
     */
    public static final int EFP_TRADE_VALUE = 201;
    /**
     * <code>EFS_TRADE = 202;</code>
     */
    public static final int EFS_TRADE_VALUE = 202;
    /**
     * <code>BILATERAL_OFF_EXCHANGE_TRADE = 203;</code>
     */
    public static final int BILATERAL_OFF_EXCHANGE_TRADE_VALUE = 203;
    /**
     * <code>NG_EFP_EFS_TRADE = 204;</code>
     */
    public static final int NG_EFP_EFS_TRADE_VALUE = 204;
    /**
     * <code>CCX_EFP_TRADE = 205;</code>
     */
    public static final int CCX_EFP_TRADE_VALUE = 205;
    /**
     * <code>EFR_TRADE = 206;</code>
     */
    public static final int EFR_TRADE_VALUE = 206;
    /**
     * <code>SYSTEM_PRICED_CRACK_SPREAD_LEG = 207;</code>
     */
    public static final int SYSTEM_PRICED_CRACK_SPREAD_LEG_VALUE = 207;
    /**
     * <code>SYSTEM_PRICED_LEG = 208;</code>
     */
    public static final int SYSTEM_PRICED_LEG_VALUE = 208;
    /**
     * <code>IMPLIED_SPREAD_AT_MARKET_OPEN = 209;</code>
     */
    public static final int IMPLIED_SPREAD_AT_MARKET_OPEN_VALUE = 209;
    /**
     * <code>TIME_OPENED = 250;</code>
     *
     * <pre>
     ** Time market opened. 
     * </pre>
     */
    public static final int TIME_OPENED_VALUE = 250;
    /**
     * <code>TIME_CLOSED = 251;</code>
     *
     * <pre>
     ** Time market closed. 
     * </pre>
     */
    public static final int TIME_CLOSED_VALUE = 251;
    /**
     * <code>TIME_UPDATED = 252;</code>
     *
     * <pre>
     ** Time market updated. 
     * </pre>
     */
    public static final int TIME_UPDATED_VALUE = 252;


    public final int getNumber() { return value; }

    public static Descriptor valueOf(int value) {
      switch (value) {
        case 0: return BOOK_IMPLIED;
        case 1: return BOOK_RFQ;
        case 2: return SETTLE_UNOFFICIAL;
        case 3: return SETTLE_PRELIMINARY;
        case 4: return SETTLE_THEORETICAL;
        case 10: return PERIOD_DAY;
        case 11: return PERIOD_WEEK;
        case 12: return PERIOD_MONTH;
        case 13: return PERIOD_YEAR;
        case 14: return LAST_BEST;
        case 20: return SESSION_HIGH;
        case 21: return SESSION_LOW;
        case 30: return ADJUSTED_TRADE;
        case 50: return SESSION_OVERNIGHT;
        case 60: return ORDER_COUNT;
        case 61: return IMPLIED_QUANTITY;
        case 62: return IMPLIED_ORDER_COUNT;
        case 70: return NUMBER_OF_BOOK_ENTRIES;
        case 71: return LAST_MESSAGE_SEQUENCE;
        case 72: return PERCENTAGE;
        case 73: return OVER_THE_COUNTER;
        case 74: return EXCHANGE_TRADED;
        case 80: return OPTION_THEORETICAL_BID;
        case 81: return OPTION_THEORETICAL_ASK;
        case 82: return OPTION_DELTA;
        case 83: return OPTION_VEGA;
        case 100: return STATUS_MARKET_OPEN;
        case 101: return STATUS_MARKET_CLOSE;
        case 102: return STATUS_MARKET_PRE_OPEN;
        case 103: return STATUS_MARKET_PRE_CLOSE;
        case 104: return STATUS_TRADING_PAUSE;
        case 105: return STATUS_TRADING_RESUME;
        case 106: return STATUS_MARKET_EXPIRED;
        case 110: return SIDE_FIRM;
        case 111: return SIDE_CUSTOMER;
        case 112: return INDEX_ON_TRADE;
        case 113: return INDEX_ON_BOOK;
        case 120: return VOLUME_BLOCK;
        case 121: return VOLUME_EFS;
        case 122: return VOLUME_EFP;
        case 123: return PRICE_VWAP;
        case 124: return PRICE_SYSTEM;
        case 125: return TRADE_BLOCK;
        case 126: return TRADE_CANCELED;
        case 127: return TRADE_INVESTIGATED;
        case 180: return PRE_OPEN;
        case 181: return OPEN_INTEREST;
        case 200: return BLOCK_TRADE;
        case 201: return EFP_TRADE;
        case 202: return EFS_TRADE;
        case 203: return BILATERAL_OFF_EXCHANGE_TRADE;
        case 204: return NG_EFP_EFS_TRADE;
        case 205: return CCX_EFP_TRADE;
        case 206: return EFR_TRADE;
        case 207: return SYSTEM_PRICED_CRACK_SPREAD_LEG;
        case 208: return SYSTEM_PRICED_LEG;
        case 209: return IMPLIED_SPREAD_AT_MARKET_OPEN;
        case 250: return TIME_OPENED;
        case 251: return TIME_CLOSED;
        case 252: return TIME_UPDATED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Descriptor>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Descriptor>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Descriptor>() {
            public Descriptor findValueByNumber(int number) {
              return Descriptor.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.openfeed.proto.data.MarketEntry.getDescriptor().getEnumTypes().get(2);
    }

    private static final Descriptor[] VALUES = values();

    public static Descriptor valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Descriptor(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.openfeed.proto.data.MarketEntry.Descriptor)
  }

  private int bitField0_;
  // optional .org.openfeed.proto.data.MarketEntry.Action action = 1;
  public static final int ACTION_FIELD_NUMBER = 1;
  private org.openfeed.proto.data.MarketEntry.Action action_;
  /**
   * <code>optional .org.openfeed.proto.data.MarketEntry.Action action = 1;</code>
   *
   * <pre>
   * Entry action.
   * </pre>
   */
  public boolean hasAction() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional .org.openfeed.proto.data.MarketEntry.Action action = 1;</code>
   *
   * <pre>
   * Entry action.
   * </pre>
   */
  public org.openfeed.proto.data.MarketEntry.Action getAction() {
    return action_;
  }

  // optional .org.openfeed.proto.data.MarketEntry.Type type = 2;
  public static final int TYPE_FIELD_NUMBER = 2;
  private org.openfeed.proto.data.MarketEntry.Type type_;
  /**
   * <code>optional .org.openfeed.proto.data.MarketEntry.Type type = 2;</code>
   *
   * <pre>
   * Primary entry category.
   * </pre>
   */
  public boolean hasType() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>optional .org.openfeed.proto.data.MarketEntry.Type type = 2;</code>
   *
   * <pre>
   * Primary entry category.
   * </pre>
   */
  public org.openfeed.proto.data.MarketEntry.Type getType() {
    return type_;
  }

  // repeated .org.openfeed.proto.data.MarketEntry.Descriptor descriptor = 3 [packed = true];
  public static final int DESCRIPTOR_FIELD_NUMBER = 3;
  private java.util.List<org.openfeed.proto.data.MarketEntry.Descriptor> descriptor_;
  /**
   * <code>repeated .org.openfeed.proto.data.MarketEntry.Descriptor descriptor = 3 [packed = true];</code>
   *
   * <pre>
   * Secondary entry category list.
   * </pre>
   */
  public java.util.List<org.openfeed.proto.data.MarketEntry.Descriptor> getDescriptorList() {
    return descriptor_;
  }
  /**
   * <code>repeated .org.openfeed.proto.data.MarketEntry.Descriptor descriptor = 3 [packed = true];</code>
   *
   * <pre>
   * Secondary entry category list.
   * </pre>
   */
  public int getDescriptorCount() {
    return descriptor_.size();
  }
  /**
   * <code>repeated .org.openfeed.proto.data.MarketEntry.Descriptor descriptor = 3 [packed = true];</code>
   *
   * <pre>
   * Secondary entry category list.
   * </pre>
   */
  public org.openfeed.proto.data.MarketEntry.Descriptor getDescriptor(int index) {
    return descriptor_.get(index);
  }
  private int descriptorMemoizedSerializedSize;

  // optional sint64 marketId = 4;
  public static final int MARKETID_FIELD_NUMBER = 4;
  private long marketId_;
  /**
   * <code>optional sint64 marketId = 4;</code>
   *
   * <pre>
   * Globally unique market id.
   * Override to message head;
   * </pre>
   */
  public boolean hasMarketId() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>optional sint64 marketId = 4;</code>
   *
   * <pre>
   * Globally unique market id.
   * Override to message head;
   * </pre>
   */
  public long getMarketId() {
    return marketId_;
  }

  // optional sint64 sequence = 5;
  public static final int SEQUENCE_FIELD_NUMBER = 5;
  private long sequence_;
  /**
   * <code>optional sint64 sequence = 5;</code>
   *
   * <pre>
   * Market sequence number.
   * Offset to message head;
   * </pre>
   */
  public boolean hasSequence() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>optional sint64 sequence = 5;</code>
   *
   * <pre>
   * Market sequence number.
   * Offset to message head;
   * </pre>
   */
  public long getSequence() {
    return sequence_;
  }

  // optional sint64 timeStamp = 6;
  public static final int TIMESTAMP_FIELD_NUMBER = 6;
  private long timeStamp_;
  /**
   * <code>optional sint64 timeStamp = 6;</code>
   *
   * <pre>
   * Transaction time stamp.
   * Offset to message head, millis (non fix).
   * </pre>
   */
  public boolean hasTimeStamp() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>optional sint64 timeStamp = 6;</code>
   *
   * <pre>
   * Transaction time stamp.
   * Offset to message head, millis (non fix).
   * </pre>
   */
  public long getTimeStamp() {
    return timeStamp_;
  }

  // optional sint32 tradeDate = 7;
  public static final int TRADEDATE_FIELD_NUMBER = 7;
  private int tradeDate_;
  /**
   * <code>optional sint32 tradeDate = 7;</code>
   *
   * <pre>
   * Entry trade date.
   * Offset to message head, millis (non fix).
   * </pre>
   */
  public boolean hasTradeDate() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <code>optional sint32 tradeDate = 7;</code>
   *
   * <pre>
   * Entry trade date.
   * Offset to message head, millis (non fix).
   * </pre>
   */
  public int getTradeDate() {
    return tradeDate_;
  }

  // optional sint64 priceMantissa = 8;
  public static final int PRICEMANTISSA_FIELD_NUMBER = 8;
  private long priceMantissa_;
  /**
   * <code>optional sint64 priceMantissa = 8;</code>
   *
   * <pre>
   * Entry price value.
   * </pre>
   */
  public boolean hasPriceMantissa() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <code>optional sint64 priceMantissa = 8;</code>
   *
   * <pre>
   * Entry price value.
   * </pre>
   */
  public long getPriceMantissa() {
    return priceMantissa_;
  }

  // optional sint32 priceExponent = 9;
  public static final int PRICEEXPONENT_FIELD_NUMBER = 9;
  private int priceExponent_;
  /**
   * <code>optional sint32 priceExponent = 9;</code>
   *
   * <pre>
   * override to head;
   * </pre>
   */
  public boolean hasPriceExponent() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <code>optional sint32 priceExponent = 9;</code>
   *
   * <pre>
   * override to head;
   * </pre>
   */
  public int getPriceExponent() {
    return priceExponent_;
  }

  // optional sint64 sizeMantissa = 10;
  public static final int SIZEMANTISSA_FIELD_NUMBER = 10;
  private long sizeMantissa_;
  /**
   * <code>optional sint64 sizeMantissa = 10;</code>
   *
   * <pre>
   * Entry size value.
   * </pre>
   */
  public boolean hasSizeMantissa() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <code>optional sint64 sizeMantissa = 10;</code>
   *
   * <pre>
   * Entry size value.
   * </pre>
   */
  public long getSizeMantissa() {
    return sizeMantissa_;
  }

  // optional sint32 sizeExponent = 11;
  public static final int SIZEEXPONENT_FIELD_NUMBER = 11;
  private int sizeExponent_;
  /**
   * <code>optional sint32 sizeExponent = 11;</code>
   *
   * <pre>
   * override to head;
   * </pre>
   */
  public boolean hasSizeExponent() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <code>optional sint32 sizeExponent = 11;</code>
   *
   * <pre>
   * override to head;
   * </pre>
   */
  public int getSizeExponent() {
    return sizeExponent_;
  }

  // optional sint64 index = 12;
  public static final int INDEX_FIELD_NUMBER = 12;
  private long index_;
  /**
   * <code>optional sint64 index = 12;</code>
   *
   * <pre>
   * Entry index.
   * Such as book level, cuvol position, snapshot &amp; update sequence, etc.
   * </pre>
   */
  public boolean hasIndex() {
    return ((bitField0_ & 0x00000400) == 0x00000400);
  }
  /**
   * <code>optional sint64 index = 12;</code>
   *
   * <pre>
   * Entry index.
   * Such as book level, cuvol position, snapshot &amp; update sequence, etc.
   * </pre>
   */
  public long getIndex() {
    return index_;
  }

  // optional sint64 orderId = 13;
  public static final int ORDERID_FIELD_NUMBER = 13;
  private long orderId_;
  /**
   * <code>optional sint64 orderId = 13;</code>
   *
   * <pre>
   * Market order id of this entry.
   * </pre>
   */
  public boolean hasOrderId() {
    return ((bitField0_ & 0x00000800) == 0x00000800);
  }
  /**
   * <code>optional sint64 orderId = 13;</code>
   *
   * <pre>
   * Market order id of this entry.
   * </pre>
   */
  public long getOrderId() {
    return orderId_;
  }

  // optional sint32 orderCount = 14;
  public static final int ORDERCOUNT_FIELD_NUMBER = 14;
  private int orderCount_;
  /**
   * <code>optional sint32 orderCount = 14;</code>
   *
   * <pre>
   * Market order count in this entry.
   * </pre>
   */
  public boolean hasOrderCount() {
    return ((bitField0_ & 0x00001000) == 0x00001000);
  }
  /**
   * <code>optional sint32 orderCount = 14;</code>
   *
   * <pre>
   * Market order count in this entry.
   * </pre>
   */
  public int getOrderCount() {
    return orderCount_;
  }

  private void initFields() {
    action_ = org.openfeed.proto.data.MarketEntry.Action.ADD;
    type_ = org.openfeed.proto.data.MarketEntry.Type.TRADE;
    descriptor_ = java.util.Collections.emptyList();
    marketId_ = 0L;
    sequence_ = 0L;
    timeStamp_ = 0L;
    tradeDate_ = 0;
    priceMantissa_ = 0L;
    priceExponent_ = 0;
    sizeMantissa_ = 0L;
    sizeExponent_ = 0;
    index_ = 0L;
    orderId_ = 0L;
    orderCount_ = 0;
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized != -1) return isInitialized == 1;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeEnum(1, action_.getNumber());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeEnum(2, type_.getNumber());
    }
    if (getDescriptorList().size() > 0) {
      output.writeRawVarint32(26);
      output.writeRawVarint32(descriptorMemoizedSerializedSize);
    }
    for (int i = 0; i < descriptor_.size(); i++) {
      output.writeEnumNoTag(descriptor_.get(i).getNumber());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeSInt64(4, marketId_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeSInt64(5, sequence_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeSInt64(6, timeStamp_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeSInt32(7, tradeDate_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeSInt64(8, priceMantissa_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeSInt32(9, priceExponent_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeSInt64(10, sizeMantissa_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      output.writeSInt32(11, sizeExponent_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      output.writeSInt64(12, index_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      output.writeSInt64(13, orderId_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      output.writeSInt32(14, orderCount_);
    }
    getUnknownFields().writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, action_.getNumber());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, type_.getNumber());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < descriptor_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(descriptor_.get(i).getNumber());
      }
      size += dataSize;
      if (!getDescriptorList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeRawVarint32Size(dataSize);
      }descriptorMemoizedSerializedSize = dataSize;
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt64Size(4, marketId_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt64Size(5, sequence_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt64Size(6, timeStamp_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt32Size(7, tradeDate_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt64Size(8, priceMantissa_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt32Size(9, priceExponent_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt64Size(10, sizeMantissa_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt32Size(11, sizeExponent_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt64Size(12, index_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt64Size(13, orderId_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt32Size(14, orderCount_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.openfeed.proto.data.MarketEntry)) {
      return super.equals(obj);
    }
    org.openfeed.proto.data.MarketEntry other = (org.openfeed.proto.data.MarketEntry) obj;

    boolean result = true;
    result = result && (hasAction() == other.hasAction());
    if (hasAction()) {
      result = result &&
          (getAction() == other.getAction());
    }
    result = result && (hasType() == other.hasType());
    if (hasType()) {
      result = result &&
          (getType() == other.getType());
    }
    result = result && getDescriptorList()
        .equals(other.getDescriptorList());
    result = result && (hasMarketId() == other.hasMarketId());
    if (hasMarketId()) {
      result = result && (getMarketId()
          == other.getMarketId());
    }
    result = result && (hasSequence() == other.hasSequence());
    if (hasSequence()) {
      result = result && (getSequence()
          == other.getSequence());
    }
    result = result && (hasTimeStamp() == other.hasTimeStamp());
    if (hasTimeStamp()) {
      result = result && (getTimeStamp()
          == other.getTimeStamp());
    }
    result = result && (hasTradeDate() == other.hasTradeDate());
    if (hasTradeDate()) {
      result = result && (getTradeDate()
          == other.getTradeDate());
    }
    result = result && (hasPriceMantissa() == other.hasPriceMantissa());
    if (hasPriceMantissa()) {
      result = result && (getPriceMantissa()
          == other.getPriceMantissa());
    }
    result = result && (hasPriceExponent() == other.hasPriceExponent());
    if (hasPriceExponent()) {
      result = result && (getPriceExponent()
          == other.getPriceExponent());
    }
    result = result && (hasSizeMantissa() == other.hasSizeMantissa());
    if (hasSizeMantissa()) {
      result = result && (getSizeMantissa()
          == other.getSizeMantissa());
    }
    result = result && (hasSizeExponent() == other.hasSizeExponent());
    if (hasSizeExponent()) {
      result = result && (getSizeExponent()
          == other.getSizeExponent());
    }
    result = result && (hasIndex() == other.hasIndex());
    if (hasIndex()) {
      result = result && (getIndex()
          == other.getIndex());
    }
    result = result && (hasOrderId() == other.hasOrderId());
    if (hasOrderId()) {
      result = result && (getOrderId()
          == other.getOrderId());
    }
    result = result && (hasOrderCount() == other.hasOrderCount());
    if (hasOrderCount()) {
      result = result && (getOrderCount()
          == other.getOrderCount());
    }
    result = result &&
        getUnknownFields().equals(other.getUnknownFields());
    return result;
  }

  private int memoizedHashCode = 0;
  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    if (hasAction()) {
      hash = (37 * hash) + ACTION_FIELD_NUMBER;
      hash = (53 * hash) + hashEnum(getAction());
    }
    if (hasType()) {
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + hashEnum(getType());
    }
    if (getDescriptorCount() > 0) {
      hash = (37 * hash) + DESCRIPTOR_FIELD_NUMBER;
      hash = (53 * hash) + hashEnumList(getDescriptorList());
    }
    if (hasMarketId()) {
      hash = (37 * hash) + MARKETID_FIELD_NUMBER;
      hash = (53 * hash) + hashLong(getMarketId());
    }
    if (hasSequence()) {
      hash = (37 * hash) + SEQUENCE_FIELD_NUMBER;
      hash = (53 * hash) + hashLong(getSequence());
    }
    if (hasTimeStamp()) {
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + hashLong(getTimeStamp());
    }
    if (hasTradeDate()) {
      hash = (37 * hash) + TRADEDATE_FIELD_NUMBER;
      hash = (53 * hash) + getTradeDate();
    }
    if (hasPriceMantissa()) {
      hash = (37 * hash) + PRICEMANTISSA_FIELD_NUMBER;
      hash = (53 * hash) + hashLong(getPriceMantissa());
    }
    if (hasPriceExponent()) {
      hash = (37 * hash) + PRICEEXPONENT_FIELD_NUMBER;
      hash = (53 * hash) + getPriceExponent();
    }
    if (hasSizeMantissa()) {
      hash = (37 * hash) + SIZEMANTISSA_FIELD_NUMBER;
      hash = (53 * hash) + hashLong(getSizeMantissa());
    }
    if (hasSizeExponent()) {
      hash = (37 * hash) + SIZEEXPONENT_FIELD_NUMBER;
      hash = (53 * hash) + getSizeExponent();
    }
    if (hasIndex()) {
      hash = (37 * hash) + INDEX_FIELD_NUMBER;
      hash = (53 * hash) + hashLong(getIndex());
    }
    if (hasOrderId()) {
      hash = (37 * hash) + ORDERID_FIELD_NUMBER;
      hash = (53 * hash) + hashLong(getOrderId());
    }
    if (hasOrderCount()) {
      hash = (37 * hash) + ORDERCOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getOrderCount();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.openfeed.proto.data.MarketEntry parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.openfeed.proto.data.MarketEntry parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.openfeed.proto.data.MarketEntry parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.openfeed.proto.data.MarketEntry parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.openfeed.proto.data.MarketEntry parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.openfeed.proto.data.MarketEntry parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.openfeed.proto.data.MarketEntry parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.openfeed.proto.data.MarketEntry parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.openfeed.proto.data.MarketEntry parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.openfeed.proto.data.MarketEntry parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.openfeed.proto.data.MarketEntry prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.openfeed.proto.data.MarketEntry}
   *
   * <pre>
   * Market data entry.
   * </pre>
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder>
     implements org.openfeed.proto.data.MarketEntryOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.openfeed.proto.data.MarketEntrySpec.internal_static_org_openfeed_proto_data_MarketEntry_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.openfeed.proto.data.MarketEntrySpec.internal_static_org_openfeed_proto_data_MarketEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.openfeed.proto.data.MarketEntry.class, org.openfeed.proto.data.MarketEntry.Builder.class);
    }

    // Construct using org.openfeed.proto.data.MarketEntry.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      action_ = org.openfeed.proto.data.MarketEntry.Action.ADD;
      bitField0_ = (bitField0_ & ~0x00000001);
      type_ = org.openfeed.proto.data.MarketEntry.Type.TRADE;
      bitField0_ = (bitField0_ & ~0x00000002);
      descriptor_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      marketId_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000008);
      sequence_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000010);
      timeStamp_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000020);
      tradeDate_ = 0;
      bitField0_ = (bitField0_ & ~0x00000040);
      priceMantissa_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000080);
      priceExponent_ = 0;
      bitField0_ = (bitField0_ & ~0x00000100);
      sizeMantissa_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000200);
      sizeExponent_ = 0;
      bitField0_ = (bitField0_ & ~0x00000400);
      index_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000800);
      orderId_ = 0L;
      bitField0_ = (bitField0_ & ~0x00001000);
      orderCount_ = 0;
      bitField0_ = (bitField0_ & ~0x00002000);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.openfeed.proto.data.MarketEntrySpec.internal_static_org_openfeed_proto_data_MarketEntry_descriptor;
    }

    public org.openfeed.proto.data.MarketEntry getDefaultInstanceForType() {
      return org.openfeed.proto.data.MarketEntry.getDefaultInstance();
    }

    public org.openfeed.proto.data.MarketEntry build() {
      org.openfeed.proto.data.MarketEntry result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.openfeed.proto.data.MarketEntry buildPartial() {
      org.openfeed.proto.data.MarketEntry result = new org.openfeed.proto.data.MarketEntry(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.action_ = action_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.type_ = type_;
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        descriptor_ = java.util.Collections.unmodifiableList(descriptor_);
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.descriptor_ = descriptor_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000004;
      }
      result.marketId_ = marketId_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000008;
      }
      result.sequence_ = sequence_;
      if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
        to_bitField0_ |= 0x00000010;
      }
      result.timeStamp_ = timeStamp_;
      if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
        to_bitField0_ |= 0x00000020;
      }
      result.tradeDate_ = tradeDate_;
      if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
        to_bitField0_ |= 0x00000040;
      }
      result.priceMantissa_ = priceMantissa_;
      if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
        to_bitField0_ |= 0x00000080;
      }
      result.priceExponent_ = priceExponent_;
      if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
        to_bitField0_ |= 0x00000100;
      }
      result.sizeMantissa_ = sizeMantissa_;
      if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
        to_bitField0_ |= 0x00000200;
      }
      result.sizeExponent_ = sizeExponent_;
      if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
        to_bitField0_ |= 0x00000400;
      }
      result.index_ = index_;
      if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
        to_bitField0_ |= 0x00000800;
      }
      result.orderId_ = orderId_;
      if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
        to_bitField0_ |= 0x00001000;
      }
      result.orderCount_ = orderCount_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.openfeed.proto.data.MarketEntry) {
        return mergeFrom((org.openfeed.proto.data.MarketEntry)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.openfeed.proto.data.MarketEntry other) {
      if (other == org.openfeed.proto.data.MarketEntry.getDefaultInstance()) return this;
      if (other.hasAction()) {
        setAction(other.getAction());
      }
      if (other.hasType()) {
        setType(other.getType());
      }
      if (!other.descriptor_.isEmpty()) {
        if (descriptor_.isEmpty()) {
          descriptor_ = other.descriptor_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureDescriptorIsMutable();
          descriptor_.addAll(other.descriptor_);
        }
        onChanged();
      }
      if (other.hasMarketId()) {
        setMarketId(other.getMarketId());
      }
      if (other.hasSequence()) {
        setSequence(other.getSequence());
      }
      if (other.hasTimeStamp()) {
        setTimeStamp(other.getTimeStamp());
      }
      if (other.hasTradeDate()) {
        setTradeDate(other.getTradeDate());
      }
      if (other.hasPriceMantissa()) {
        setPriceMantissa(other.getPriceMantissa());
      }
      if (other.hasPriceExponent()) {
        setPriceExponent(other.getPriceExponent());
      }
      if (other.hasSizeMantissa()) {
        setSizeMantissa(other.getSizeMantissa());
      }
      if (other.hasSizeExponent()) {
        setSizeExponent(other.getSizeExponent());
      }
      if (other.hasIndex()) {
        setIndex(other.getIndex());
      }
      if (other.hasOrderId()) {
        setOrderId(other.getOrderId());
      }
      if (other.hasOrderCount()) {
        setOrderCount(other.getOrderCount());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.openfeed.proto.data.MarketEntry parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.openfeed.proto.data.MarketEntry) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    // optional .org.openfeed.proto.data.MarketEntry.Action action = 1;
    private org.openfeed.proto.data.MarketEntry.Action action_ = org.openfeed.proto.data.MarketEntry.Action.ADD;
    /**
     * <code>optional .org.openfeed.proto.data.MarketEntry.Action action = 1;</code>
     *
     * <pre>
     * Entry action.
     * </pre>
     */
    public boolean hasAction() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .org.openfeed.proto.data.MarketEntry.Action action = 1;</code>
     *
     * <pre>
     * Entry action.
     * </pre>
     */
    public org.openfeed.proto.data.MarketEntry.Action getAction() {
      return action_;
    }
    /**
     * <code>optional .org.openfeed.proto.data.MarketEntry.Action action = 1;</code>
     *
     * <pre>
     * Entry action.
     * </pre>
     */
    public Builder setAction(org.openfeed.proto.data.MarketEntry.Action value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      action_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional .org.openfeed.proto.data.MarketEntry.Action action = 1;</code>
     *
     * <pre>
     * Entry action.
     * </pre>
     */
    public Builder clearAction() {
      bitField0_ = (bitField0_ & ~0x00000001);
      action_ = org.openfeed.proto.data.MarketEntry.Action.ADD;
      onChanged();
      return this;
    }

    // optional .org.openfeed.proto.data.MarketEntry.Type type = 2;
    private org.openfeed.proto.data.MarketEntry.Type type_ = org.openfeed.proto.data.MarketEntry.Type.TRADE;
    /**
     * <code>optional .org.openfeed.proto.data.MarketEntry.Type type = 2;</code>
     *
     * <pre>
     * Primary entry category.
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .org.openfeed.proto.data.MarketEntry.Type type = 2;</code>
     *
     * <pre>
     * Primary entry category.
     * </pre>
     */
    public org.openfeed.proto.data.MarketEntry.Type getType() {
      return type_;
    }
    /**
     * <code>optional .org.openfeed.proto.data.MarketEntry.Type type = 2;</code>
     *
     * <pre>
     * Primary entry category.
     * </pre>
     */
    public Builder setType(org.openfeed.proto.data.MarketEntry.Type value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      type_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional .org.openfeed.proto.data.MarketEntry.Type type = 2;</code>
     *
     * <pre>
     * Primary entry category.
     * </pre>
     */
    public Builder clearType() {
      bitField0_ = (bitField0_ & ~0x00000002);
      type_ = org.openfeed.proto.data.MarketEntry.Type.TRADE;
      onChanged();
      return this;
    }

    // repeated .org.openfeed.proto.data.MarketEntry.Descriptor descriptor = 3 [packed = true];
    private java.util.List<org.openfeed.proto.data.MarketEntry.Descriptor> descriptor_ =
      java.util.Collections.emptyList();
    private void ensureDescriptorIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        descriptor_ = new java.util.ArrayList<org.openfeed.proto.data.MarketEntry.Descriptor>(descriptor_);
        bitField0_ |= 0x00000004;
      }
    }
    /**
     * <code>repeated .org.openfeed.proto.data.MarketEntry.Descriptor descriptor = 3 [packed = true];</code>
     *
     * <pre>
     * Secondary entry category list.
     * </pre>
     */
    public java.util.List<org.openfeed.proto.data.MarketEntry.Descriptor> getDescriptorList() {
      return java.util.Collections.unmodifiableList(descriptor_);
    }
    /**
     * <code>repeated .org.openfeed.proto.data.MarketEntry.Descriptor descriptor = 3 [packed = true];</code>
     *
     * <pre>
     * Secondary entry category list.
     * </pre>
     */
    public int getDescriptorCount() {
      return descriptor_.size();
    }
    /**
     * <code>repeated .org.openfeed.proto.data.MarketEntry.Descriptor descriptor = 3 [packed = true];</code>
     *
     * <pre>
     * Secondary entry category list.
     * </pre>
     */
    public org.openfeed.proto.data.MarketEntry.Descriptor getDescriptor(int index) {
      return descriptor_.get(index);
    }
    /**
     * <code>repeated .org.openfeed.proto.data.MarketEntry.Descriptor descriptor = 3 [packed = true];</code>
     *
     * <pre>
     * Secondary entry category list.
     * </pre>
     */
    public Builder setDescriptor(
        int index, org.openfeed.proto.data.MarketEntry.Descriptor value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureDescriptorIsMutable();
      descriptor_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .org.openfeed.proto.data.MarketEntry.Descriptor descriptor = 3 [packed = true];</code>
     *
     * <pre>
     * Secondary entry category list.
     * </pre>
     */
    public Builder addDescriptor(org.openfeed.proto.data.MarketEntry.Descriptor value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureDescriptorIsMutable();
      descriptor_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .org.openfeed.proto.data.MarketEntry.Descriptor descriptor = 3 [packed = true];</code>
     *
     * <pre>
     * Secondary entry category list.
     * </pre>
     */
    public Builder addAllDescriptor(
        java.lang.Iterable<? extends org.openfeed.proto.data.MarketEntry.Descriptor> values) {
      ensureDescriptorIsMutable();
      super.addAll(values, descriptor_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated .org.openfeed.proto.data.MarketEntry.Descriptor descriptor = 3 [packed = true];</code>
     *
     * <pre>
     * Secondary entry category list.
     * </pre>
     */
    public Builder clearDescriptor() {
      descriptor_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }

    // optional sint64 marketId = 4;
    private long marketId_ ;
    /**
     * <code>optional sint64 marketId = 4;</code>
     *
     * <pre>
     * Globally unique market id.
     * Override to message head;
     * </pre>
     */
    public boolean hasMarketId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sint64 marketId = 4;</code>
     *
     * <pre>
     * Globally unique market id.
     * Override to message head;
     * </pre>
     */
    public long getMarketId() {
      return marketId_;
    }
    /**
     * <code>optional sint64 marketId = 4;</code>
     *
     * <pre>
     * Globally unique market id.
     * Override to message head;
     * </pre>
     */
    public Builder setMarketId(long value) {
      bitField0_ |= 0x00000008;
      marketId_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional sint64 marketId = 4;</code>
     *
     * <pre>
     * Globally unique market id.
     * Override to message head;
     * </pre>
     */
    public Builder clearMarketId() {
      bitField0_ = (bitField0_ & ~0x00000008);
      marketId_ = 0L;
      onChanged();
      return this;
    }

    // optional sint64 sequence = 5;
    private long sequence_ ;
    /**
     * <code>optional sint64 sequence = 5;</code>
     *
     * <pre>
     * Market sequence number.
     * Offset to message head;
     * </pre>
     */
    public boolean hasSequence() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint64 sequence = 5;</code>
     *
     * <pre>
     * Market sequence number.
     * Offset to message head;
     * </pre>
     */
    public long getSequence() {
      return sequence_;
    }
    /**
     * <code>optional sint64 sequence = 5;</code>
     *
     * <pre>
     * Market sequence number.
     * Offset to message head;
     * </pre>
     */
    public Builder setSequence(long value) {
      bitField0_ |= 0x00000010;
      sequence_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional sint64 sequence = 5;</code>
     *
     * <pre>
     * Market sequence number.
     * Offset to message head;
     * </pre>
     */
    public Builder clearSequence() {
      bitField0_ = (bitField0_ & ~0x00000010);
      sequence_ = 0L;
      onChanged();
      return this;
    }

    // optional sint64 timeStamp = 6;
    private long timeStamp_ ;
    /**
     * <code>optional sint64 timeStamp = 6;</code>
     *
     * <pre>
     * Transaction time stamp.
     * Offset to message head, millis (non fix).
     * </pre>
     */
    public boolean hasTimeStamp() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint64 timeStamp = 6;</code>
     *
     * <pre>
     * Transaction time stamp.
     * Offset to message head, millis (non fix).
     * </pre>
     */
    public long getTimeStamp() {
      return timeStamp_;
    }
    /**
     * <code>optional sint64 timeStamp = 6;</code>
     *
     * <pre>
     * Transaction time stamp.
     * Offset to message head, millis (non fix).
     * </pre>
     */
    public Builder setTimeStamp(long value) {
      bitField0_ |= 0x00000020;
      timeStamp_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional sint64 timeStamp = 6;</code>
     *
     * <pre>
     * Transaction time stamp.
     * Offset to message head, millis (non fix).
     * </pre>
     */
    public Builder clearTimeStamp() {
      bitField0_ = (bitField0_ & ~0x00000020);
      timeStamp_ = 0L;
      onChanged();
      return this;
    }

    // optional sint32 tradeDate = 7;
    private int tradeDate_ ;
    /**
     * <code>optional sint32 tradeDate = 7;</code>
     *
     * <pre>
     * Entry trade date.
     * Offset to message head, millis (non fix).
     * </pre>
     */
    public boolean hasTradeDate() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional sint32 tradeDate = 7;</code>
     *
     * <pre>
     * Entry trade date.
     * Offset to message head, millis (non fix).
     * </pre>
     */
    public int getTradeDate() {
      return tradeDate_;
    }
    /**
     * <code>optional sint32 tradeDate = 7;</code>
     *
     * <pre>
     * Entry trade date.
     * Offset to message head, millis (non fix).
     * </pre>
     */
    public Builder setTradeDate(int value) {
      bitField0_ |= 0x00000040;
      tradeDate_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional sint32 tradeDate = 7;</code>
     *
     * <pre>
     * Entry trade date.
     * Offset to message head, millis (non fix).
     * </pre>
     */
    public Builder clearTradeDate() {
      bitField0_ = (bitField0_ & ~0x00000040);
      tradeDate_ = 0;
      onChanged();
      return this;
    }

    // optional sint64 priceMantissa = 8;
    private long priceMantissa_ ;
    /**
     * <code>optional sint64 priceMantissa = 8;</code>
     *
     * <pre>
     * Entry price value.
     * </pre>
     */
    public boolean hasPriceMantissa() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional sint64 priceMantissa = 8;</code>
     *
     * <pre>
     * Entry price value.
     * </pre>
     */
    public long getPriceMantissa() {
      return priceMantissa_;
    }
    /**
     * <code>optional sint64 priceMantissa = 8;</code>
     *
     * <pre>
     * Entry price value.
     * </pre>
     */
    public Builder setPriceMantissa(long value) {
      bitField0_ |= 0x00000080;
      priceMantissa_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional sint64 priceMantissa = 8;</code>
     *
     * <pre>
     * Entry price value.
     * </pre>
     */
    public Builder clearPriceMantissa() {
      bitField0_ = (bitField0_ & ~0x00000080);
      priceMantissa_ = 0L;
      onChanged();
      return this;
    }

    // optional sint32 priceExponent = 9;
    private int priceExponent_ ;
    /**
     * <code>optional sint32 priceExponent = 9;</code>
     *
     * <pre>
     * override to head;
     * </pre>
     */
    public boolean hasPriceExponent() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional sint32 priceExponent = 9;</code>
     *
     * <pre>
     * override to head;
     * </pre>
     */
    public int getPriceExponent() {
      return priceExponent_;
    }
    /**
     * <code>optional sint32 priceExponent = 9;</code>
     *
     * <pre>
     * override to head;
     * </pre>
     */
    public Builder setPriceExponent(int value) {
      bitField0_ |= 0x00000100;
      priceExponent_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional sint32 priceExponent = 9;</code>
     *
     * <pre>
     * override to head;
     * </pre>
     */
    public Builder clearPriceExponent() {
      bitField0_ = (bitField0_ & ~0x00000100);
      priceExponent_ = 0;
      onChanged();
      return this;
    }

    // optional sint64 sizeMantissa = 10;
    private long sizeMantissa_ ;
    /**
     * <code>optional sint64 sizeMantissa = 10;</code>
     *
     * <pre>
     * Entry size value.
     * </pre>
     */
    public boolean hasSizeMantissa() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional sint64 sizeMantissa = 10;</code>
     *
     * <pre>
     * Entry size value.
     * </pre>
     */
    public long getSizeMantissa() {
      return sizeMantissa_;
    }
    /**
     * <code>optional sint64 sizeMantissa = 10;</code>
     *
     * <pre>
     * Entry size value.
     * </pre>
     */
    public Builder setSizeMantissa(long value) {
      bitField0_ |= 0x00000200;
      sizeMantissa_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional sint64 sizeMantissa = 10;</code>
     *
     * <pre>
     * Entry size value.
     * </pre>
     */
    public Builder clearSizeMantissa() {
      bitField0_ = (bitField0_ & ~0x00000200);
      sizeMantissa_ = 0L;
      onChanged();
      return this;
    }

    // optional sint32 sizeExponent = 11;
    private int sizeExponent_ ;
    /**
     * <code>optional sint32 sizeExponent = 11;</code>
     *
     * <pre>
     * override to head;
     * </pre>
     */
    public boolean hasSizeExponent() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional sint32 sizeExponent = 11;</code>
     *
     * <pre>
     * override to head;
     * </pre>
     */
    public int getSizeExponent() {
      return sizeExponent_;
    }
    /**
     * <code>optional sint32 sizeExponent = 11;</code>
     *
     * <pre>
     * override to head;
     * </pre>
     */
    public Builder setSizeExponent(int value) {
      bitField0_ |= 0x00000400;
      sizeExponent_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional sint32 sizeExponent = 11;</code>
     *
     * <pre>
     * override to head;
     * </pre>
     */
    public Builder clearSizeExponent() {
      bitField0_ = (bitField0_ & ~0x00000400);
      sizeExponent_ = 0;
      onChanged();
      return this;
    }

    // optional sint64 index = 12;
    private long index_ ;
    /**
     * <code>optional sint64 index = 12;</code>
     *
     * <pre>
     * Entry index.
     * Such as book level, cuvol position, snapshot &amp; update sequence, etc.
     * </pre>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional sint64 index = 12;</code>
     *
     * <pre>
     * Entry index.
     * Such as book level, cuvol position, snapshot &amp; update sequence, etc.
     * </pre>
     */
    public long getIndex() {
      return index_;
    }
    /**
     * <code>optional sint64 index = 12;</code>
     *
     * <pre>
     * Entry index.
     * Such as book level, cuvol position, snapshot &amp; update sequence, etc.
     * </pre>
     */
    public Builder setIndex(long value) {
      bitField0_ |= 0x00000800;
      index_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional sint64 index = 12;</code>
     *
     * <pre>
     * Entry index.
     * Such as book level, cuvol position, snapshot &amp; update sequence, etc.
     * </pre>
     */
    public Builder clearIndex() {
      bitField0_ = (bitField0_ & ~0x00000800);
      index_ = 0L;
      onChanged();
      return this;
    }

    // optional sint64 orderId = 13;
    private long orderId_ ;
    /**
     * <code>optional sint64 orderId = 13;</code>
     *
     * <pre>
     * Market order id of this entry.
     * </pre>
     */
    public boolean hasOrderId() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional sint64 orderId = 13;</code>
     *
     * <pre>
     * Market order id of this entry.
     * </pre>
     */
    public long getOrderId() {
      return orderId_;
    }
    /**
     * <code>optional sint64 orderId = 13;</code>
     *
     * <pre>
     * Market order id of this entry.
     * </pre>
     */
    public Builder setOrderId(long value) {
      bitField0_ |= 0x00001000;
      orderId_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional sint64 orderId = 13;</code>
     *
     * <pre>
     * Market order id of this entry.
     * </pre>
     */
    public Builder clearOrderId() {
      bitField0_ = (bitField0_ & ~0x00001000);
      orderId_ = 0L;
      onChanged();
      return this;
    }

    // optional sint32 orderCount = 14;
    private int orderCount_ ;
    /**
     * <code>optional sint32 orderCount = 14;</code>
     *
     * <pre>
     * Market order count in this entry.
     * </pre>
     */
    public boolean hasOrderCount() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional sint32 orderCount = 14;</code>
     *
     * <pre>
     * Market order count in this entry.
     * </pre>
     */
    public int getOrderCount() {
      return orderCount_;
    }
    /**
     * <code>optional sint32 orderCount = 14;</code>
     *
     * <pre>
     * Market order count in this entry.
     * </pre>
     */
    public Builder setOrderCount(int value) {
      bitField0_ |= 0x00002000;
      orderCount_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional sint32 orderCount = 14;</code>
     *
     * <pre>
     * Market order count in this entry.
     * </pre>
     */
    public Builder clearOrderCount() {
      bitField0_ = (bitField0_ & ~0x00002000);
      orderCount_ = 0;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.openfeed.proto.data.MarketEntry)
  }

  static {
    defaultInstance = new MarketEntry(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.openfeed.proto.data.MarketEntry)
}

