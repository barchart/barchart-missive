// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MarketEntrySpec.proto

package org.openfeed.proto.data;

public interface MarketEntryOrBuilder
    extends com.google.protobuf.MessageOrBuilder {

  // optional .org.openfeed.proto.data.MarketEntry.Action action = 1;
  /**
   * <code>optional .org.openfeed.proto.data.MarketEntry.Action action = 1;</code>
   *
   * <pre>
   * Entry action.
   * </pre>
   */
  boolean hasAction();
  /**
   * <code>optional .org.openfeed.proto.data.MarketEntry.Action action = 1;</code>
   *
   * <pre>
   * Entry action.
   * </pre>
   */
  org.openfeed.proto.data.MarketEntry.Action getAction();

  // optional .org.openfeed.proto.data.MarketEntry.Type type = 2;
  /**
   * <code>optional .org.openfeed.proto.data.MarketEntry.Type type = 2;</code>
   *
   * <pre>
   * Primary entry category.
   * </pre>
   */
  boolean hasType();
  /**
   * <code>optional .org.openfeed.proto.data.MarketEntry.Type type = 2;</code>
   *
   * <pre>
   * Primary entry category.
   * </pre>
   */
  org.openfeed.proto.data.MarketEntry.Type getType();

  // repeated .org.openfeed.proto.data.MarketEntry.Descriptor descriptor = 3 [packed = true];
  /**
   * <code>repeated .org.openfeed.proto.data.MarketEntry.Descriptor descriptor = 3 [packed = true];</code>
   *
   * <pre>
   * Secondary entry category list.
   * </pre>
   */
  java.util.List<org.openfeed.proto.data.MarketEntry.Descriptor> getDescriptorList();
  /**
   * <code>repeated .org.openfeed.proto.data.MarketEntry.Descriptor descriptor = 3 [packed = true];</code>
   *
   * <pre>
   * Secondary entry category list.
   * </pre>
   */
  int getDescriptorCount();
  /**
   * <code>repeated .org.openfeed.proto.data.MarketEntry.Descriptor descriptor = 3 [packed = true];</code>
   *
   * <pre>
   * Secondary entry category list.
   * </pre>
   */
  org.openfeed.proto.data.MarketEntry.Descriptor getDescriptor(int index);

  // optional sint64 marketId = 4;
  /**
   * <code>optional sint64 marketId = 4;</code>
   *
   * <pre>
   * Globally unique market id.
   * Override to message head;
   * </pre>
   */
  boolean hasMarketId();
  /**
   * <code>optional sint64 marketId = 4;</code>
   *
   * <pre>
   * Globally unique market id.
   * Override to message head;
   * </pre>
   */
  long getMarketId();

  // optional sint64 sequence = 5;
  /**
   * <code>optional sint64 sequence = 5;</code>
   *
   * <pre>
   * Market sequence number.
   * Offset to message head;
   * </pre>
   */
  boolean hasSequence();
  /**
   * <code>optional sint64 sequence = 5;</code>
   *
   * <pre>
   * Market sequence number.
   * Offset to message head;
   * </pre>
   */
  long getSequence();

  // optional sint64 timeStamp = 6;
  /**
   * <code>optional sint64 timeStamp = 6;</code>
   *
   * <pre>
   * Transaction time stamp.
   * Offset to message head, millis (non fix).
   * </pre>
   */
  boolean hasTimeStamp();
  /**
   * <code>optional sint64 timeStamp = 6;</code>
   *
   * <pre>
   * Transaction time stamp.
   * Offset to message head, millis (non fix).
   * </pre>
   */
  long getTimeStamp();

  // optional sint32 tradeDate = 7;
  /**
   * <code>optional sint32 tradeDate = 7;</code>
   *
   * <pre>
   * Entry trade date.
   * Offset to message head, millis (non fix).
   * </pre>
   */
  boolean hasTradeDate();
  /**
   * <code>optional sint32 tradeDate = 7;</code>
   *
   * <pre>
   * Entry trade date.
   * Offset to message head, millis (non fix).
   * </pre>
   */
  int getTradeDate();

  // optional sint64 priceMantissa = 8;
  /**
   * <code>optional sint64 priceMantissa = 8;</code>
   *
   * <pre>
   * Entry price value.
   * </pre>
   */
  boolean hasPriceMantissa();
  /**
   * <code>optional sint64 priceMantissa = 8;</code>
   *
   * <pre>
   * Entry price value.
   * </pre>
   */
  long getPriceMantissa();

  // optional sint32 priceExponent = 9;
  /**
   * <code>optional sint32 priceExponent = 9;</code>
   *
   * <pre>
   * override to head;
   * </pre>
   */
  boolean hasPriceExponent();
  /**
   * <code>optional sint32 priceExponent = 9;</code>
   *
   * <pre>
   * override to head;
   * </pre>
   */
  int getPriceExponent();

  // optional sint64 sizeMantissa = 10;
  /**
   * <code>optional sint64 sizeMantissa = 10;</code>
   *
   * <pre>
   * Entry size value.
   * </pre>
   */
  boolean hasSizeMantissa();
  /**
   * <code>optional sint64 sizeMantissa = 10;</code>
   *
   * <pre>
   * Entry size value.
   * </pre>
   */
  long getSizeMantissa();

  // optional sint32 sizeExponent = 11;
  /**
   * <code>optional sint32 sizeExponent = 11;</code>
   *
   * <pre>
   * override to head;
   * </pre>
   */
  boolean hasSizeExponent();
  /**
   * <code>optional sint32 sizeExponent = 11;</code>
   *
   * <pre>
   * override to head;
   * </pre>
   */
  int getSizeExponent();

  // optional sint64 index = 12;
  /**
   * <code>optional sint64 index = 12;</code>
   *
   * <pre>
   * Entry index.
   * Such as book level, cuvol position, snapshot &amp; update sequence, etc.
   * </pre>
   */
  boolean hasIndex();
  /**
   * <code>optional sint64 index = 12;</code>
   *
   * <pre>
   * Entry index.
   * Such as book level, cuvol position, snapshot &amp; update sequence, etc.
   * </pre>
   */
  long getIndex();

  // optional sint64 orderId = 13;
  /**
   * <code>optional sint64 orderId = 13;</code>
   *
   * <pre>
   * Market order id of this entry.
   * </pre>
   */
  boolean hasOrderId();
  /**
   * <code>optional sint64 orderId = 13;</code>
   *
   * <pre>
   * Market order id of this entry.
   * </pre>
   */
  long getOrderId();

  // optional sint32 orderCount = 14;
  /**
   * <code>optional sint32 orderCount = 14;</code>
   *
   * <pre>
   * Market order count in this entry.
   * </pre>
   */
  boolean hasOrderCount();
  /**
   * <code>optional sint32 orderCount = 14;</code>
   *
   * <pre>
   * Market order count in this entry.
   * </pre>
   */
  int getOrderCount();
}
